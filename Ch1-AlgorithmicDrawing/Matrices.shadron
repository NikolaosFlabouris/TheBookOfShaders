// Implementaion of the functions described in
// The Book of Shaders, Chapter: Algorithmic Drawing - Matrices.

#include <math_constants>

const int WIDTH = 720;
const int HEIGHT = 720;

parameter int Function_Selector = 1 : range(1, 3);

function mat2 rotate2d(float angle){
    return mat2(cos(angle), -sin(angle),
                sin(angle), cos(angle));
}

function mat2 scale(vec2 scale){
    return mat2(scale.x, 0.0,
                0.0, scale.y);
}

glsl vec4 movingCircle(vec2 position)
{
    vec2 pos = position - vec2(0.5);
    pos += vec2(cos(shadron_Time), sin(shadron_Time)) * 0.3;

    vec3 circle = vec3(1-smoothstep(0.1, 0.1001, length(pos)));
    return vec4(circle, 1.0);
}

glsl vec4 rotatingSquare(vec2 position)
{
    vec2 pos = position - vec2(0.5);
    pos = rotate2d((cos(shadron_Time) + 1.0) * PI) * pos;
    vec3 square = 1 - (vec3(smoothstep(0.2, 0.2001, length(pos.x))) + vec3(smoothstep(0.2, 0.2001, length(pos.y))));
    return vec4(square, 1.0);
}

glsl vec4 scalingCircle(vec2 position)
{
    vec2 pos = position - vec2(0.5);
    pos = scale(vec2(cos(shadron_Time) * 3.0)) * pos;
    vec3 circle = vec3(1-smoothstep(0.1, 0.1001, length(pos)));
    return vec4(circle, 1.0);
}

glsl vec4 shaderPicker(vec2 position)
{
    switch(Function_Selector)
    {
    case 1:
        return movingCircle(position);
    case 2:
        return rotatingSquare(position);
    case 3:
        return scalingCircle(position);
    default:
        break;
    }
}

animation myShader = glsl(shaderPicker, WIDTH, HEIGHT);