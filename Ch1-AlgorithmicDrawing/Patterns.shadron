// Implementaion of the functions described in
// The Book of Shaders, Chapter: Algorithmic Drawing - Shapes.

#include <math_constants>

const int WIDTH = 720;
const int HEIGHT = 720;

parameter int Function_Selector = 1 : range(1, 3);

function mat2 rotate2d(float angle){
    return mat2(cos(angle), -sin(angle),
                sin(angle), cos(angle));
}

function mat2 scale(vec2 scale){
    return mat2(scale.x, 0.0,
                0.0, scale.y);
}

glsl vec4 tile(vec2 position)
{
    // Scale.
    vec2 pos = position * 5.0;
    pos = fract(pos);
    // Translate.
    pos -= vec2(0.5);
    // Rotate.
    pos *= rotate2d(0.25 * PI);

    vec3 square = 1 - (vec3(smoothstep(0.35, 0.35001, length(pos.x))) + vec3(smoothstep(0.35, 0.35001, length(pos.y))));
    return vec4(square, 1.0);
}

glsl vec4 shaderPicker(vec2 position)
{
    switch(Function_Selector)
    {
    case 1:
        return tile(position);
    // case 2:
    //     return rotatingSquare(position);
    // case 3:
    //     return scalingCircle(position);
    default:
        break;
    }
}

image myShader = glsl(shaderPicker, WIDTH, HEIGHT);