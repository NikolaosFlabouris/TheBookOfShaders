// Implementaion of the functions described in
// The Book of Shaders, Chapter: Algorithmic Drawing - Shapes.

#include <math_constants>

const int WIDTH = 720;
const int HEIGHT = 720;

parameter int Function_Selector = 1 : range(1, 4);

function mat2 rotate2d(float angle){
    return mat2(cos(angle), -sin(angle),
                sin(angle), cos(angle));
}

function mat2 scale(vec2 scale){
    return mat2(scale.x, 0.0,
                0.0, scale.y);
}

glsl vec4 tile(vec2 position)
{
    // Scale.
    vec2 pos = position * 5.0;
    pos = fract(pos);
    // Translate.
    pos -= vec2(0.5);
    // Rotate.
    pos *= rotate2d(0.25 * PI);

    vec3 square = 1 - (vec3(smoothstep(0.35, 0.35001, length(pos.x))) + vec3(smoothstep(0.35, 0.35001, length(pos.y))));
    return vec4(square, 1.0);
}

glsl vec4 brickTile(vec2 position)
{
    // Scale.
    vec2 pos = position * 5.0;
    // If an odd row then shift x by half a column.
    pos.x += mod(floor(position.y * 5.0), 2.0)/2;
    // Divide into smaller quadrants
    pos = fract(pos);
    // Translate local coordinates.
    pos -= vec2(0.5);
    // Create square.
    vec3 square = (vec3(smoothstep(0.45, 0.4501, length(pos.x))) + vec3(smoothstep(0.45, 0.4501, length(pos.y))));
    return vec4(square, 1.0);
}

glsl vec4 animatedCircles(vec2 position)
{
    // Scale.
    vec2 pos = position * 10.0;
    // Calculate offset by time.
    float time = shadron_Time * 0.5;
    if(fract(time) > 0.5)
    {
        if(fract(pos.y * 0.5) > 0.5)
        {
            pos.x += fract(time) * 2.0;
        }
        else
        {
            pos.x -= fract(time) * 2.0;
        }
    }
    else
    {
        if(fract(pos.x * 0.5) > 0.5)
        {
            pos.y += fract(time) * 2.0;
        }
        else
        {
            pos.y -= fract(time) * 2.0;
        }
    }

    // Divide into smaller quadrants
    pos = fract(pos);
    // Translate local coordinates.
    pos -= vec2(0.5);
    // Create circle.
    vec3 circle = vec3(smoothstep(0.45, 0.4501, length(pos)));
    return vec4(circle, 1.0);
}

glsl vec4 truchetTile(vec2 position)
{
    vec2 pos = position * 5.0;
    pos = fract(pos);

    vec3 truchet = 1 - (vec3(step(pos.x, pos.y)));
    return vec4(truchet, 1.0);
}

glsl vec4 shaderPicker(vec2 position)
{
    switch(Function_Selector)
    {
    case 1:
        return tile(position);
    case 2:
        return brickTile(position);
    case 3:
        return animatedCircles(position);
    case 4:
        return truchetTile(position);
    default:
        break;
    }
}

animation myShader = glsl(shaderPicker, WIDTH, HEIGHT);