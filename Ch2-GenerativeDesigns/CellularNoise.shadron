// Implementaion of the functions described in
// The Book of Shaders, Chapter: Generative Designs - Celluar Noise.

#extension gif

#include <hsv>
#include <math_constants>

const int WIDTH = 720;
const int HEIGHT = 720;

parameter int Function_Selector = 1 : range(1, 3);
parameter int Scale_Factor = 1 : range(1, 10);
variable vec2 mousePos = vec2(0.0);

// Updates global variable storing mouse position.
procedure updateMousePos(vec2 mouse)
{
    mousePos.x = min(mouse.x, WIDTH);
    mousePos.y = min(mouse.y, HEIGHT);
}

// Event to trigger the update of the mouse position.
event mouse_position() = updateMousePos;

// A deterministic random function.
glsl vec2 random2(vec2 pos)
{
    return fract(sin(vec2(dot(pos, vec2(127.1, 311.7)), dot(pos, vec2(269.5, 183.3)))) * 43758.5453);
}

glsl vec4 distancePoints(vec2 position)
{
    // Inilise minDist to largest possible value.
    float minDist = sqrt(pow(WIDTH, 2) + pow(HEIGHT, 2));

    const int numPoints = 5;
    vec2 points[numPoints];
    points[0] = vec2(0.83,0.75);
    points[1] = vec2(0.60,0.07);
    points[2] = vec2(0.31,0.26);
    points[3] = vec2(0.28,0.64);
    points[4] = vec2(mousePos.x, mousePos.y);

    // For each pixel measure the minimum distance between it and each point in the list.
    // Set this value as the pixel intensity.
    for(int point = 0; point < numPoints; ++point)
    {
        float dist = distance(position, points[point]);
        minDist = min(dist, minDist);
    }

    return vec4(vec3(minDist),1.0);
}

// Created tiled region where each tile holds a point. Intial location of point
// within tile is set with a deterministic random function. Calculate value of
// each pixel by measuing the distance from each point and setting the min value
// as the colour. Move location of points within the tiles over time.
glsl vec4 celluarNoise(vec2 position)
{
    vec2 scaledPos = position * Scale_Factor;

    vec2 region = floor(scaledPos);
    vec2 localPos = fract(scaledPos);

    float minDist = 1.0;

    for(int regionX = -1; regionX <= 1; ++regionX)
    {
        for(int regionY = -1; regionY <= 1; ++regionY)
        {
            vec2 neighbourOffset = vec2(float(regionX), float(regionY));

            vec2 randomLocation = random2(region + neighbourOffset);

            randomLocation = 0.5 + (0.5 * sin(shadron_Time + 6.2831 * randomLocation));

            vec2 difference = neighbourOffset + randomLocation - localPos;

            minDist = min(minDist, length(difference));
        }
    }

    return vec4(vec3(minDist), 1.0);
}

// Celluar Noise but keep track of the location of the nearest point and use its value to
// determine colour. Creates coloured region effects.
glsl vec4 Voronoi(vec2 position)
{
    vec2 scaledPos = position * Scale_Factor;

    vec2 region = floor(scaledPos);
    vec2 localPos = fract(scaledPos);

    float minDist = 1.0;
    vec2 nearestPoint = vec2(0.0);

    for(int regionX = -1; regionX <= 1; ++regionX)
    {
        for(int regionY = -1; regionY <= 1; ++regionY)
        {
            vec2 neighbourOffset = vec2(float(regionX), float(regionY));

            vec2 randomLocation = random2(region + neighbourOffset);

            randomLocation = 0.5 + (0.5 * sin(shadron_Time + 6.2831 * randomLocation));

            vec2 difference = neighbourOffset + randomLocation - localPos;

            if(length(difference) < minDist)
            {
                minDist = length(difference);
                nearestPoint = randomLocation;
            }
        }
    }

    return vec4(vec3(minDist, nearestPoint.x, nearestPoint.y), 1.0);
}

glsl vec4 shaderPicker(vec2 position)
{
    switch(Function_Selector)
    {
    case 1:
        return distancePoints(position);
    case 2:
        return celluarNoise(position);
    case 3:
        return Voronoi(position);
    default:
        break;
    }
}

animation myShader = glsl(shaderPicker, WIDTH, HEIGHT);

export gif(myShader, "Voronoi.gif", 30, 6.2831, true);