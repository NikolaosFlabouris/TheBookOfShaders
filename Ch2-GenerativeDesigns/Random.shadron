// Implementaion of the functions described in
// The Book of Shaders, Chapter: Generative Designs - Random.

#include <hsv>
#include <math_constants>

const int WIDTH = 720;
const int HEIGHT = 720;

parameter int Function_Selector = 1 : range(1, 3);

// Random function using the sin function, values around 0.5 on average.
glsl float sinRand(float value)
{
    return fract(sin(value) * 300000.0);
}

// Use sinRand to shift average value below 0.5.
glsl float sinLowRand(float value)
{
    return sinRand(value) * sinRand(value);
}

// Using sinRand to shift average value above 0.5.
glsl float sinUpperRand(float value)
{
    return sqrt(sinRand(value));
}

// Using sinRand to shift average value close to 0.0.
glsl float sinLowerRand(float value)
{
    return pow(sinRand(value), 5.0);
}

// A sudo-random function.
glsl float random(vec2 pos)
{
    return fract(sin(dot(pos, vec2(12.9898, 78.233))) * 43758.5453123);
}

// Basic random, looks like static.
glsl vec4 basicRandom(vec2 position)
{
    return vec4(vec3(random(position)), 1.0);
}

// Basic random, looks like large pixels.
glsl vec4 scaledRandom(vec2 position)
{
    vec2 pos = position * 10.0;
    return vec4(vec3(random(floor(pos))), 1.0);
}

// Truchet Patter for maze.
glsl vec2 truchetPattern(vec2 pos, float value){
    float seed = fract(((value-0.5)*2.0));
    if (seed > 0.75) {
        pos = vec2(1.0) - pos;
    } else if (seed > 0.5) {
        pos = vec2(1.0-pos.x,pos.y);
    } else if (seed > 0.25) {
        pos = 1.0-vec2(1.0-pos.x,pos.y);
    }
    return pos;
}

glsl vec4 maze(vec2 position) {
    vec2 pos = position * 10.0;

    vec2 ipos = floor(pos);  // integer
    vec2 fpos = fract(pos);  // fraction

    vec2 tile = truchetPattern(fpos, random(ipos));

    float color = 0.0;

    // Maze
    color = smoothstep(tile.x-0.3,tile.x,tile.y)-
            smoothstep(tile.x,tile.x+0.3,tile.y);

    return vec4(vec3(color),1.0);
}

glsl vec4 shaderPicker(vec2 position)
{
    switch(Function_Selector)
    {
    case 1:
        return basicRandom(position);
    case 2:
        return scaledRandom(position);
    case 3:
        return maze(position);
    default:
        break;
    }
}

image myShader = glsl(shaderPicker, WIDTH, HEIGHT);